package com.sulfurengine.io;

import java.awt.Dimension;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;

import javax.swing.JFrame;

import com.sulfurengine.renderer.DirtyFlag;
import com.sulfurengine.renderer.Renderer;

public class Display {
	private int width, height;
	private String title;
	private static Display instance = null;
	
	private JFrame frame;
	private Renderer renderer;
	public static Scene currentScene = new Scene();
	
	private Display() {};
	
	public static Display get() {
		if(instance == null) {
			instance = new Display();
		} 
		return instance;
	}
	

	
	public void init(int w, int h, String t) {
		this.width = w;
		this.height = h;
		this.title = t;
		
		frame = new JFrame(title);
		frame.setSize(width, height);
		
		frame.setResizable(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		Input.initialize(frame);
		
	     frame.addComponentListener(new ComponentAdapter() {
	            @Override
	            public void componentResized(ComponentEvent e) {
	                Dimension newSize = frame.getSize();
	                width = newSize.width;
	                height = newSize.height;
	                // Add your resize event handling code here
	            }
	        });		
		renderer = new Renderer();
		frame.add(renderer);
		
		frame.setVisible(true);
	}
	
	public void update() {
	    long beginTime = System.currentTimeMillis();
	    long endTime;
	    float dt = 0.0f; // Initialize delta time to zero

	    if(currentScene == null) {
	    	System.err.println("Tried to update a null scene");
	    	close();
	    }
	    
	    // Calculate delta time only if currentScene is not null
	    endTime = System.currentTimeMillis();

	    if (endTime > beginTime) { // Ensure endTime is greater than beginTime
	        dt = (endTime - beginTime) / 1000.0f; // Convert milliseconds to seconds
	    }
	    
	    if(dt > 0) {
	        // Call scene update and render
	        currentScene.update(dt);
	        if(DirtyFlag.dirty) {
	        	renderer.repaint();
	        	DirtyFlag.dirty = false;
	        }
	    }
	}


	public int width() {
		return width;
	}

	public int height() {
		return height;
	}

	public static boolean open() {
		return !Input.isKeyDown(KeyEvent.VK_ESCAPE);
	}

	public void close() {
		frame.dispose();
		System.exit(0);
	}

	public Renderer renderer() {
		return this.renderer;
	}
}
