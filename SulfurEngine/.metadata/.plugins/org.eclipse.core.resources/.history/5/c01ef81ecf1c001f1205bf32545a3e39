import java.awt.Color;
import java.awt.image.BufferedImage;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.IntStream;
import com.sulfurengine.behaviorscripts.Spriterenderer;
import com.sulfurengine.ecs.Script;
import com.sulfurengine.io.Display;
import com.sulfurengine.io.Input;
import com.sulfurengine.renderer.Sprite;

public class RayTracer extends Script {

    BufferedImage image;
    private int width;
    private int height;
    
    // Camera properties
    private static final float CAMERA_RADIUS = 500.0f; // Distance from the origin
    private float cameraAzimuth = 0.0f; // Horizontal angle
    private float cameraElevation = 0.0f; // Vertical angle


    private static final int SAMPLES_PER_PIXEL = 5; // Number of samples for anti-aliasing

    // Sphere properties
    private static final Sphere[] spheres = {
        new Sphere(-10, 0, 0, 10, Color.RED),
        new Sphere(10, 0, 0, 10, Color.BLUE),
    };

    // Light properties
    private static final float[] LIGHT_POS = { 1.0f, -1.0f, -1.0f };
    private static final Color BACKGROUND_COLOR = Color.DARK_GRAY;

    @Override
    public void start() {
        width = (int) parent.transform.scale.x;
        height = (int) parent.transform.scale.y;
        image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                image.setRGB(x, y, BACKGROUND_COLOR.getRGB()); // Set each pixel to background color
            }
        }
    }

    @Override
    public void update(float dt) {
    	cameraAzimuth += 0.01f; // Example: Rotate the camera horizontally
        cameraElevation += Input.getAxisVertical() * dt * 500; // Example: Rotate the camera vertically

        
        IntStream.range(0, width).parallel().forEach(x -> {
            for (int y = 0; y < height; y++) {
                int pixel = pixelColor(x, y);
                image.setRGB(x, y, pixel);
            }
        });
        parent.getScript(Spriterenderer.class).getSprite().setImage(image);
    }

    public int pixelColor(int x, int y) {
        float r = 0;
        float g = 0;
        float b = 0;

        for (int i = 0; i < SAMPLES_PER_PIXEL; i++) {
            float offsetX = (float) (ThreadLocalRandom.current().nextDouble() - 0.5);
            float offsetY = (float) (ThreadLocalRandom.current().nextDouble() - 0.5);

            float worldX = x + offsetX - width / 2.0f;
            float worldY = y + offsetY - height / 2.0f;
            float worldZ = 0.0f;

            // Convert pixel coordinates to ray direction in camera space
            float[] rayDir = computeRayDirection(worldX, worldY, worldZ);

            Color color = traceRay(0, 0, 0, rayDir[0], rayDir[1], rayDir[2], 1);

            r += color.getRed();
            g += color.getGreen();
            b += color.getBlue();
        }

        r /= SAMPLES_PER_PIXEL;
        g /= SAMPLES_PER_PIXEL;
        b /= SAMPLES_PER_PIXEL;

        return new Color((int) r, (int) g, (int) b).getRGB();
    }
    private float[] computeRayDirection(float worldX, float worldY, float worldZ) {
        // Convert spherical coordinates to Cartesian coordinates
        float cameraX = CAMERA_RADIUS * (float) Math.cos(cameraElevation) * (float) Math.cos(cameraAzimuth);
        float cameraY = CAMERA_RADIUS * (float) Math.sin(cameraElevation);
        float cameraZ = CAMERA_RADIUS * (float) Math.cos(cameraElevation) * (float) Math.sin(cameraAzimuth);

        // Compute ray direction from camera to the world point
        float rayDirX = worldX - cameraX;
        float rayDirY = worldY - cameraY;
        float rayDirZ = worldZ - cameraZ;

        // Normalize ray direction
        float length = (float) Math.sqrt(rayDirX * rayDirX + rayDirY * rayDirY + rayDirZ * rayDirZ);
        return new float[] { rayDirX / length, rayDirY / length, rayDirZ / length };
    }
    
    private Color traceRay(float rayOriginX, float rayOriginY, float rayOriginZ, float rayDirX, float rayDirY,
            float rayDirZ, int depth) {
        if (depth > 3) {
            return BACKGROUND_COLOR; // Limit recursion depth for reflections
        }

        Sphere closestSphere = null;
        float closestT = Float.MAX_VALUE;

        for (Sphere sphere : spheres) {
            float[] t = intersectRaySphere(rayOriginX, rayOriginY, rayOriginZ, rayDirX, rayDirY, rayDirZ, sphere);
            if (t[0] > 0 && t[0] < closestT) {
                closestT = t[0];
                closestSphere = sphere;
            }
            if (t[1] > 0 && t[1] < closestT) {
                closestT = t[1];
                closestSphere = sphere;
            }
        }

        if (closestSphere == null) {
            return BACKGROUND_COLOR; // No intersection, return background color
        }

        // Intersection point
        float hitX = rayOriginX + closestT * rayDirX;
        float hitY = rayOriginY + closestT * rayDirY;
        float hitZ = rayOriginZ + closestT * rayDirZ;

        // Normal at the intersection point
        float normalX = (hitX - closestSphere.centerX) / closestSphere.radius;
        float normalY = (hitY - closestSphere.centerY) / closestSphere.radius;
        float normalZ = (hitZ - closestSphere.centerZ) / closestSphere.radius;

        // Lambertian shading
        float[] lightDir = normalize(LIGHT_POS[0], LIGHT_POS[1], LIGHT_POS[2]);

        float dot = Math.max(0, normalX * lightDir[0] + normalY * lightDir[1] + normalZ * lightDir[2]);

        int r = (int) (closestSphere.color.getRed() * dot);
        int g = (int) (closestSphere.color.getGreen() * dot);
        int b = (int) (closestSphere.color.getBlue() * dot);

        // Reflection
        float[] reflectDir = reflect(rayDirX, rayDirY, rayDirZ, normalX, normalY, normalZ, dot);

        Color reflectionColor = traceRay(hitX, hitY, hitZ, reflectDir[0], reflectDir[1], reflectDir[2], depth + 1);

        float reflectivity = 0.5f;
        r = (int) (r * (1 - reflectivity) + reflectionColor.getRed() * reflectivity);
        g = (int) (g * (1 - reflectivity) + reflectionColor.getGreen() * reflectivity);
        b = (int) (b * (1 - reflectivity) + reflectionColor.getBlue() * reflectivity);

        return new Color(r, g, b);
    }

    private float[] intersectRaySphere(float rayOriginX, float rayOriginY, float rayOriginZ, float rayDirX,
            float rayDirY, float rayDirZ, Sphere sphere) {
        float ocX = rayOriginX - sphere.centerX;
        float ocY = rayOriginY - sphere.centerY;
        float ocZ = rayOriginZ - sphere.centerZ;

        float a = rayDirX * rayDirX + rayDirY * rayDirY + rayDirZ * rayDirZ;
        float b = 2.0f * (ocX * rayDirX + ocY * rayDirY + ocZ * rayDirZ);
        float c = ocX * ocX + ocY * ocY + ocZ * ocZ - sphere.radius * sphere.radius;

        float discriminant = b * b - 4 * a * c;

        if (discriminant < 0) {
            return new float[] { -1, -1 };
        } else {
            float sqrtDiscriminant = (float) Math.sqrt(discriminant);
            float t1 = (-b - sqrtDiscriminant) / (2.0f * a);
            float t2 = (-b + sqrtDiscriminant) / (2.0f * a);
            return new float[] { t1, t2 };
        }
    }

    private float[] normalize(float x, float y, float z) {
        float length = (float) Math.sqrt(x * x + y * y + z * z);
        return new float[] { x / length, y / length, z / length };
    }

    private float[] reflect(float rayDirX, float rayDirY, float rayDirZ, float normalX, float normalY, float normalZ, float dot) {
        float reflectX = rayDirX - 2 * dot * normalX;
        float reflectY = rayDirY - 2 * dot * normalY;
        float reflectZ = rayDirZ - 2 * dot * normalZ;
        return new float[] { reflectX, reflectY, reflectZ };
    }

    private static class Sphere {
        float centerX, centerY, centerZ;
        float radius;
        Color color;

        Sphere(float centerX, float centerY, float centerZ, float radius, Color color) {
            this.centerX = centerX;
            this.centerY = centerY;
            this.centerZ = centerZ;
            this.radius = radius;
            this.color = color;
        }
    }
}
